/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VehicleRegistry {
  export type UserVehicleStruct = {
    vehicleId: BigNumberish;
    owner: AddressLike;
    licensePlate: string;
    currentBatteryLevel: BigNumberish;
    lastUpdated: BigNumberish;
  };

  export type UserVehicleStructOutput = [
    vehicleId: bigint,
    owner: string,
    licensePlate: string,
    currentBatteryLevel: bigint,
    lastUpdated: bigint
  ] & {
    vehicleId: bigint;
    owner: string;
    licensePlate: string;
    currentBatteryLevel: bigint;
    lastUpdated: bigint;
  };

  export type VehicleStruct = {
    id: BigNumberish;
    model: string;
    brand: string;
    batteryCapacity: BigNumberish;
    range: BigNumberish;
    chargingSpeed: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type VehicleStructOutput = [
    id: bigint,
    model: string,
    brand: string,
    batteryCapacity: bigint,
    range: bigint,
    chargingSpeed: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    id: bigint;
    model: string;
    brand: string;
    batteryCapacity: bigint;
    range: bigint;
    chargingSpeed: bigint;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface VehicleRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVehicle"
      | "getCurrentVehicleId"
      | "getTotalVehicles"
      | "getUserVehicles"
      | "getVehicle"
      | "owner"
      | "registerUserVehicle"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateBatteryLevel"
      | "userVehicles"
      | "vehicleExists"
      | "vehicles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatteryLevelUpdated"
      | "OwnershipTransferred"
      | "UserVehicleRegistered"
      | "VehicleAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVehicle",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVehicleId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVehicles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVehicles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerUserVehicle",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBatteryLevel",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userVehicles",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vehicleExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vehicles",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addVehicle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVehicleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVehicles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVehicles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVehicle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUserVehicle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBatteryLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVehicles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vehicleExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vehicles", data: BytesLike): Result;
}

export namespace BatteryLevelUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    userVehicleIndex: BigNumberish,
    batteryLevel: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    userVehicleIndex: bigint,
    batteryLevel: bigint
  ];
  export interface OutputObject {
    user: string;
    userVehicleIndex: bigint;
    batteryLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVehicleRegisteredEvent {
  export type InputTuple = [
    user: AddressLike,
    vehicleId: BigNumberish,
    licensePlate: string
  ];
  export type OutputTuple = [
    user: string,
    vehicleId: bigint,
    licensePlate: string
  ];
  export interface OutputObject {
    user: string;
    vehicleId: bigint;
    licensePlate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VehicleAddedEvent {
  export type InputTuple = [
    vehicleId: BigNumberish,
    model: string,
    brand: string
  ];
  export type OutputTuple = [vehicleId: bigint, model: string, brand: string];
  export interface OutputObject {
    vehicleId: bigint;
    model: string;
    brand: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VehicleRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VehicleRegistry;
  waitForDeployment(): Promise<this>;

  interface: VehicleRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVehicle: TypedContractMethod<
    [
      _model: string,
      _brand: string,
      _batteryCapacity: BigNumberish,
      _range: BigNumberish,
      _chargingSpeed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCurrentVehicleId: TypedContractMethod<[], [bigint], "view">;

  getTotalVehicles: TypedContractMethod<[], [bigint], "view">;

  getUserVehicles: TypedContractMethod<
    [_user: AddressLike],
    [VehicleRegistry.UserVehicleStructOutput[]],
    "view"
  >;

  getVehicle: TypedContractMethod<
    [_vehicleId: BigNumberish],
    [VehicleRegistry.VehicleStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerUserVehicle: TypedContractMethod<
    [
      _vehicleId: BigNumberish,
      _licensePlate: string,
      _currentBatteryLevel: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBatteryLevel: TypedContractMethod<
    [_userVehicleIndex: BigNumberish, _batteryLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  userVehicles: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        vehicleId: bigint;
        owner: string;
        licensePlate: string;
        currentBatteryLevel: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  vehicleExists: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  vehicles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean, bigint] & {
        id: bigint;
        model: string;
        brand: string;
        batteryCapacity: bigint;
        range: bigint;
        chargingSpeed: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVehicle"
  ): TypedContractMethod<
    [
      _model: string,
      _brand: string,
      _batteryCapacity: BigNumberish,
      _range: BigNumberish,
      _chargingSpeed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentVehicleId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalVehicles"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserVehicles"
  ): TypedContractMethod<
    [_user: AddressLike],
    [VehicleRegistry.UserVehicleStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVehicle"
  ): TypedContractMethod<
    [_vehicleId: BigNumberish],
    [VehicleRegistry.VehicleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerUserVehicle"
  ): TypedContractMethod<
    [
      _vehicleId: BigNumberish,
      _licensePlate: string,
      _currentBatteryLevel: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBatteryLevel"
  ): TypedContractMethod<
    [_userVehicleIndex: BigNumberish, _batteryLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userVehicles"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        vehicleId: bigint;
        owner: string;
        licensePlate: string;
        currentBatteryLevel: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vehicleExists"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "vehicles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean, bigint] & {
        id: bigint;
        model: string;
        brand: string;
        batteryCapacity: bigint;
        range: bigint;
        chargingSpeed: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "BatteryLevelUpdated"
  ): TypedContractEvent<
    BatteryLevelUpdatedEvent.InputTuple,
    BatteryLevelUpdatedEvent.OutputTuple,
    BatteryLevelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UserVehicleRegistered"
  ): TypedContractEvent<
    UserVehicleRegisteredEvent.InputTuple,
    UserVehicleRegisteredEvent.OutputTuple,
    UserVehicleRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VehicleAdded"
  ): TypedContractEvent<
    VehicleAddedEvent.InputTuple,
    VehicleAddedEvent.OutputTuple,
    VehicleAddedEvent.OutputObject
  >;

  filters: {
    "BatteryLevelUpdated(address,uint256,uint256)": TypedContractEvent<
      BatteryLevelUpdatedEvent.InputTuple,
      BatteryLevelUpdatedEvent.OutputTuple,
      BatteryLevelUpdatedEvent.OutputObject
    >;
    BatteryLevelUpdated: TypedContractEvent<
      BatteryLevelUpdatedEvent.InputTuple,
      BatteryLevelUpdatedEvent.OutputTuple,
      BatteryLevelUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UserVehicleRegistered(address,uint256,string)": TypedContractEvent<
      UserVehicleRegisteredEvent.InputTuple,
      UserVehicleRegisteredEvent.OutputTuple,
      UserVehicleRegisteredEvent.OutputObject
    >;
    UserVehicleRegistered: TypedContractEvent<
      UserVehicleRegisteredEvent.InputTuple,
      UserVehicleRegisteredEvent.OutputTuple,
      UserVehicleRegisteredEvent.OutputObject
    >;

    "VehicleAdded(uint256,string,string)": TypedContractEvent<
      VehicleAddedEvent.InputTuple,
      VehicleAddedEvent.OutputTuple,
      VehicleAddedEvent.OutputObject
    >;
    VehicleAdded: TypedContractEvent<
      VehicleAddedEvent.InputTuple,
      VehicleAddedEvent.OutputTuple,
      VehicleAddedEvent.OutputObject
    >;
  };
}
