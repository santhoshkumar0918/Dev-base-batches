/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BookingManager {
  export type BookingStruct = {
    id: BigNumberish;
    user: AddressLike;
    stationId: BigNumberish;
    slotNumber: BigNumberish;
    journeyId: BigNumberish;
    scheduledStartTime: BigNumberish;
    scheduledEndTime: BigNumberish;
    estimatedChargingDuration: BigNumberish;
    bookedAt: BigNumberish;
    status: BigNumberish;
    actualStartTime: BigNumberish;
    actualEndTime: BigNumberish;
    totalCost: BigNumberish;
    isPaid: boolean;
  };

  export type BookingStructOutput = [
    id: bigint,
    user: string,
    stationId: bigint,
    slotNumber: bigint,
    journeyId: bigint,
    scheduledStartTime: bigint,
    scheduledEndTime: bigint,
    estimatedChargingDuration: bigint,
    bookedAt: bigint,
    status: bigint,
    actualStartTime: bigint,
    actualEndTime: bigint,
    totalCost: bigint,
    isPaid: boolean
  ] & {
    id: bigint;
    user: string;
    stationId: bigint;
    slotNumber: bigint;
    journeyId: bigint;
    scheduledStartTime: bigint;
    scheduledEndTime: bigint;
    estimatedChargingDuration: bigint;
    bookedAt: bigint;
    status: bigint;
    actualStartTime: bigint;
    actualEndTime: bigint;
    totalCost: bigint;
    isPaid: boolean;
  };
}

export interface BookingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bookings"
      | "cancelBooking"
      | "chargingStationManager"
      | "completeCharging"
      | "confirmBooking"
      | "createBooking"
      | "getBooking"
      | "getCurrentBookingId"
      | "getJourneyBookings"
      | "getUserBookings"
      | "isSlotAvailable"
      | "journeyBookings"
      | "startCharging"
      | "stationSlotBookings"
      | "userBookings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookingCancelled"
      | "BookingCompleted"
      | "BookingConfirmed"
      | "BookingCreated"
      | "BookingStarted"
      | "PaymentReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBooking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargingStationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeCharging",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmBooking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBooking",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBooking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBookingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJourneyBookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBookings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSlotAvailable",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "journeyBookings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startCharging",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stationSlotBookings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBookings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBooking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargingStationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeCharging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmBooking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBooking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBooking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBookingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJourneyBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSlotAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "journeyBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startCharging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stationSlotBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBookings",
    data: BytesLike
  ): Result;
}

export namespace BookingCancelledEvent {
  export type InputTuple = [bookingId: BigNumberish];
  export type OutputTuple = [bookingId: bigint];
  export interface OutputObject {
    bookingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingCompletedEvent {
  export type InputTuple = [bookingId: BigNumberish, totalCost: BigNumberish];
  export type OutputTuple = [bookingId: bigint, totalCost: bigint];
  export interface OutputObject {
    bookingId: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingConfirmedEvent {
  export type InputTuple = [bookingId: BigNumberish];
  export type OutputTuple = [bookingId: bigint];
  export interface OutputObject {
    bookingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingCreatedEvent {
  export type InputTuple = [
    bookingId: BigNumberish,
    user: AddressLike,
    stationId: BigNumberish
  ];
  export type OutputTuple = [
    bookingId: bigint,
    user: string,
    stationId: bigint
  ];
  export interface OutputObject {
    bookingId: bigint;
    user: string;
    stationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingStartedEvent {
  export type InputTuple = [bookingId: BigNumberish];
  export type OutputTuple = [bookingId: bigint];
  export interface OutputObject {
    bookingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [bookingId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [bookingId: bigint, amount: bigint];
  export interface OutputObject {
    bookingId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BookingManager extends BaseContract {
  connect(runner?: ContractRunner | null): BookingManager;
  waitForDeployment(): Promise<this>;

  interface: BookingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bookings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        user: string;
        stationId: bigint;
        slotNumber: bigint;
        journeyId: bigint;
        scheduledStartTime: bigint;
        scheduledEndTime: bigint;
        estimatedChargingDuration: bigint;
        bookedAt: bigint;
        status: bigint;
        actualStartTime: bigint;
        actualEndTime: bigint;
        totalCost: bigint;
        isPaid: boolean;
      }
    ],
    "view"
  >;

  cancelBooking: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  chargingStationManager: TypedContractMethod<[], [string], "view">;

  completeCharging: TypedContractMethod<
    [_bookingId: BigNumberish, _energyConsumed: BigNumberish],
    [void],
    "payable"
  >;

  confirmBooking: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createBooking: TypedContractMethod<
    [
      _stationId: BigNumberish,
      _slotNumber: BigNumberish,
      _journeyId: BigNumberish,
      _scheduledStartTime: BigNumberish,
      _estimatedChargingDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getBooking: TypedContractMethod<
    [_bookingId: BigNumberish],
    [BookingManager.BookingStructOutput],
    "view"
  >;

  getCurrentBookingId: TypedContractMethod<[], [bigint], "view">;

  getJourneyBookings: TypedContractMethod<
    [_journeyId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getUserBookings: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  isSlotAvailable: TypedContractMethod<
    [
      _stationId: BigNumberish,
      _slotNumber: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [boolean],
    "view"
  >;

  journeyBookings: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  startCharging: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  stationSlotBookings: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userBookings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bookings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        user: string;
        stationId: bigint;
        slotNumber: bigint;
        journeyId: bigint;
        scheduledStartTime: bigint;
        scheduledEndTime: bigint;
        estimatedChargingDuration: bigint;
        bookedAt: bigint;
        status: bigint;
        actualStartTime: bigint;
        actualEndTime: bigint;
        totalCost: bigint;
        isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelBooking"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chargingStationManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "completeCharging"
  ): TypedContractMethod<
    [_bookingId: BigNumberish, _energyConsumed: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "confirmBooking"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createBooking"
  ): TypedContractMethod<
    [
      _stationId: BigNumberish,
      _slotNumber: BigNumberish,
      _journeyId: BigNumberish,
      _scheduledStartTime: BigNumberish,
      _estimatedChargingDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBooking"
  ): TypedContractMethod<
    [_bookingId: BigNumberish],
    [BookingManager.BookingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentBookingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getJourneyBookings"
  ): TypedContractMethod<[_journeyId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserBookings"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isSlotAvailable"
  ): TypedContractMethod<
    [
      _stationId: BigNumberish,
      _slotNumber: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "journeyBookings"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "startCharging"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stationSlotBookings"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userBookings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "BookingCancelled"
  ): TypedContractEvent<
    BookingCancelledEvent.InputTuple,
    BookingCancelledEvent.OutputTuple,
    BookingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "BookingCompleted"
  ): TypedContractEvent<
    BookingCompletedEvent.InputTuple,
    BookingCompletedEvent.OutputTuple,
    BookingCompletedEvent.OutputObject
  >;
  getEvent(
    key: "BookingConfirmed"
  ): TypedContractEvent<
    BookingConfirmedEvent.InputTuple,
    BookingConfirmedEvent.OutputTuple,
    BookingConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "BookingCreated"
  ): TypedContractEvent<
    BookingCreatedEvent.InputTuple,
    BookingCreatedEvent.OutputTuple,
    BookingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BookingStarted"
  ): TypedContractEvent<
    BookingStartedEvent.InputTuple,
    BookingStartedEvent.OutputTuple,
    BookingStartedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;

  filters: {
    "BookingCancelled(uint256)": TypedContractEvent<
      BookingCancelledEvent.InputTuple,
      BookingCancelledEvent.OutputTuple,
      BookingCancelledEvent.OutputObject
    >;
    BookingCancelled: TypedContractEvent<
      BookingCancelledEvent.InputTuple,
      BookingCancelledEvent.OutputTuple,
      BookingCancelledEvent.OutputObject
    >;

    "BookingCompleted(uint256,uint256)": TypedContractEvent<
      BookingCompletedEvent.InputTuple,
      BookingCompletedEvent.OutputTuple,
      BookingCompletedEvent.OutputObject
    >;
    BookingCompleted: TypedContractEvent<
      BookingCompletedEvent.InputTuple,
      BookingCompletedEvent.OutputTuple,
      BookingCompletedEvent.OutputObject
    >;

    "BookingConfirmed(uint256)": TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;
    BookingConfirmed: TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;

    "BookingCreated(uint256,address,uint256)": TypedContractEvent<
      BookingCreatedEvent.InputTuple,
      BookingCreatedEvent.OutputTuple,
      BookingCreatedEvent.OutputObject
    >;
    BookingCreated: TypedContractEvent<
      BookingCreatedEvent.InputTuple,
      BookingCreatedEvent.OutputTuple,
      BookingCreatedEvent.OutputObject
    >;

    "BookingStarted(uint256)": TypedContractEvent<
      BookingStartedEvent.InputTuple,
      BookingStartedEvent.OutputTuple,
      BookingStartedEvent.OutputObject
    >;
    BookingStarted: TypedContractEvent<
      BookingStartedEvent.InputTuple,
      BookingStartedEvent.OutputTuple,
      BookingStartedEvent.OutputObject
    >;

    "PaymentReceived(uint256,uint256)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
  };
}
