/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChargingStationManager {
  export type ChargingStationStruct = {
    id: BigNumberish;
    name: string;
    location: string;
    latitude: BigNumberish;
    longitude: BigNumberish;
    totalSlots: BigNumberish;
    availableSlots: BigNumberish;
    chargingSpeed: BigNumberish;
    pricePerKwh: BigNumberish;
    amenities: string[];
    isActive: boolean;
    operator: AddressLike;
    createdAt: BigNumberish;
  };

  export type ChargingStationStructOutput = [
    id: bigint,
    name: string,
    location: string,
    latitude: bigint,
    longitude: bigint,
    totalSlots: bigint,
    availableSlots: bigint,
    chargingSpeed: bigint,
    pricePerKwh: bigint,
    amenities: string[],
    isActive: boolean,
    operator: string,
    createdAt: bigint
  ] & {
    id: bigint;
    name: string;
    location: string;
    latitude: bigint;
    longitude: bigint;
    totalSlots: bigint;
    availableSlots: bigint;
    chargingSpeed: bigint;
    pricePerKwh: bigint;
    amenities: string[];
    isActive: boolean;
    operator: string;
    createdAt: bigint;
  };
}

export interface ChargingStationManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addChargingStation"
      | "chargingSlots"
      | "chargingStations"
      | "getAllChargingStations"
      | "getAvailableSlots"
      | "getChargingStation"
      | "getCurrentStationId"
      | "occupySlot"
      | "owner"
      | "releaseSlot"
      | "renounceOwnership"
      | "stationExists"
      | "transferOwnership"
      | "updateStationAvailability"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AvailabilityUpdated"
      | "ChargingStationAdded"
      | "OwnershipTransferred"
      | "SlotOccupied"
      | "SlotReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addChargingStation",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chargingSlots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargingStations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllChargingStations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableSlots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChargingStation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStationId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "occupySlot",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseSlot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stationExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStationAvailability",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addChargingStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargingSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargingStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllChargingStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChargingStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "occupySlot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stationExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStationAvailability",
    data: BytesLike
  ): Result;
}

export namespace AvailabilityUpdatedEvent {
  export type InputTuple = [
    stationId: BigNumberish,
    availableSlots: BigNumberish
  ];
  export type OutputTuple = [stationId: bigint, availableSlots: bigint];
  export interface OutputObject {
    stationId: bigint;
    availableSlots: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChargingStationAddedEvent {
  export type InputTuple = [
    stationId: BigNumberish,
    name: string,
    location: string
  ];
  export type OutputTuple = [stationId: bigint, name: string, location: string];
  export interface OutputObject {
    stationId: bigint;
    name: string;
    location: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotOccupiedEvent {
  export type InputTuple = [
    stationId: BigNumberish,
    slotNumber: BigNumberish,
    user: AddressLike
  ];
  export type OutputTuple = [
    stationId: bigint,
    slotNumber: bigint,
    user: string
  ];
  export interface OutputObject {
    stationId: bigint;
    slotNumber: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotReleasedEvent {
  export type InputTuple = [stationId: BigNumberish, slotNumber: BigNumberish];
  export type OutputTuple = [stationId: bigint, slotNumber: bigint];
  export interface OutputObject {
    stationId: bigint;
    slotNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChargingStationManager extends BaseContract {
  connect(runner?: ContractRunner | null): ChargingStationManager;
  waitForDeployment(): Promise<this>;

  interface: ChargingStationManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addChargingStation: TypedContractMethod<
    [
      _name: string,
      _location: string,
      _latitude: BigNumberish,
      _longitude: BigNumberish,
      _totalSlots: BigNumberish,
      _chargingSpeed: BigNumberish,
      _pricePerKwh: BigNumberish,
      _amenities: string[]
    ],
    [void],
    "nonpayable"
  >;

  chargingSlots: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, boolean, string, bigint, bigint] & {
        stationId: bigint;
        slotNumber: bigint;
        isOccupied: boolean;
        currentUser: string;
        startTime: bigint;
        estimatedEndTime: bigint;
      }
    ],
    "view"
  >;

  chargingStations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        id: bigint;
        name: string;
        location: string;
        latitude: bigint;
        longitude: bigint;
        totalSlots: bigint;
        availableSlots: bigint;
        chargingSpeed: bigint;
        pricePerKwh: bigint;
        isActive: boolean;
        operator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getAllChargingStations: TypedContractMethod<
    [],
    [ChargingStationManager.ChargingStationStructOutput[]],
    "view"
  >;

  getAvailableSlots: TypedContractMethod<
    [_stationId: BigNumberish],
    [bigint],
    "view"
  >;

  getChargingStation: TypedContractMethod<
    [_stationId: BigNumberish],
    [ChargingStationManager.ChargingStationStructOutput],
    "view"
  >;

  getCurrentStationId: TypedContractMethod<[], [bigint], "view">;

  occupySlot: TypedContractMethod<
    [
      _stationId: BigNumberish,
      _slotNumber: BigNumberish,
      _estimatedEndTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  releaseSlot: TypedContractMethod<
    [_stationId: BigNumberish, _slotNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stationExists: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStationAvailability: TypedContractMethod<
    [_stationId: BigNumberish, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addChargingStation"
  ): TypedContractMethod<
    [
      _name: string,
      _location: string,
      _latitude: BigNumberish,
      _longitude: BigNumberish,
      _totalSlots: BigNumberish,
      _chargingSpeed: BigNumberish,
      _pricePerKwh: BigNumberish,
      _amenities: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chargingSlots"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, boolean, string, bigint, bigint] & {
        stationId: bigint;
        slotNumber: bigint;
        isOccupied: boolean;
        currentUser: string;
        startTime: bigint;
        estimatedEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "chargingStations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        id: bigint;
        name: string;
        location: string;
        latitude: bigint;
        longitude: bigint;
        totalSlots: bigint;
        availableSlots: bigint;
        chargingSpeed: bigint;
        pricePerKwh: bigint;
        isActive: boolean;
        operator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllChargingStations"
  ): TypedContractMethod<
    [],
    [ChargingStationManager.ChargingStationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableSlots"
  ): TypedContractMethod<[_stationId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChargingStation"
  ): TypedContractMethod<
    [_stationId: BigNumberish],
    [ChargingStationManager.ChargingStationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentStationId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "occupySlot"
  ): TypedContractMethod<
    [
      _stationId: BigNumberish,
      _slotNumber: BigNumberish,
      _estimatedEndTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseSlot"
  ): TypedContractMethod<
    [_stationId: BigNumberish, _slotNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stationExists"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStationAvailability"
  ): TypedContractMethod<
    [_stationId: BigNumberish, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AvailabilityUpdated"
  ): TypedContractEvent<
    AvailabilityUpdatedEvent.InputTuple,
    AvailabilityUpdatedEvent.OutputTuple,
    AvailabilityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ChargingStationAdded"
  ): TypedContractEvent<
    ChargingStationAddedEvent.InputTuple,
    ChargingStationAddedEvent.OutputTuple,
    ChargingStationAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SlotOccupied"
  ): TypedContractEvent<
    SlotOccupiedEvent.InputTuple,
    SlotOccupiedEvent.OutputTuple,
    SlotOccupiedEvent.OutputObject
  >;
  getEvent(
    key: "SlotReleased"
  ): TypedContractEvent<
    SlotReleasedEvent.InputTuple,
    SlotReleasedEvent.OutputTuple,
    SlotReleasedEvent.OutputObject
  >;

  filters: {
    "AvailabilityUpdated(uint256,uint256)": TypedContractEvent<
      AvailabilityUpdatedEvent.InputTuple,
      AvailabilityUpdatedEvent.OutputTuple,
      AvailabilityUpdatedEvent.OutputObject
    >;
    AvailabilityUpdated: TypedContractEvent<
      AvailabilityUpdatedEvent.InputTuple,
      AvailabilityUpdatedEvent.OutputTuple,
      AvailabilityUpdatedEvent.OutputObject
    >;

    "ChargingStationAdded(uint256,string,string)": TypedContractEvent<
      ChargingStationAddedEvent.InputTuple,
      ChargingStationAddedEvent.OutputTuple,
      ChargingStationAddedEvent.OutputObject
    >;
    ChargingStationAdded: TypedContractEvent<
      ChargingStationAddedEvent.InputTuple,
      ChargingStationAddedEvent.OutputTuple,
      ChargingStationAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SlotOccupied(uint256,uint256,address)": TypedContractEvent<
      SlotOccupiedEvent.InputTuple,
      SlotOccupiedEvent.OutputTuple,
      SlotOccupiedEvent.OutputObject
    >;
    SlotOccupied: TypedContractEvent<
      SlotOccupiedEvent.InputTuple,
      SlotOccupiedEvent.OutputTuple,
      SlotOccupiedEvent.OutputObject
    >;

    "SlotReleased(uint256,uint256)": TypedContractEvent<
      SlotReleasedEvent.InputTuple,
      SlotReleasedEvent.OutputTuple,
      SlotReleasedEvent.OutputObject
    >;
    SlotReleased: TypedContractEvent<
      SlotReleasedEvent.InputTuple,
      SlotReleasedEvent.OutputTuple,
      SlotReleasedEvent.OutputObject
    >;
  };
}
