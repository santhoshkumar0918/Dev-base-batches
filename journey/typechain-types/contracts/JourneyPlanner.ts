/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace JourneyPlanner {
  export type JourneyStruct = {
    id: BigNumberish;
    user: AddressLike;
    origin: string;
    destination: string;
    vehicleId: BigNumberish;
    userVehicleIndex: BigNumberish;
    initialBatteryLevel: BigNumberish;
    totalDistance: BigNumberish;
    estimatedTotalTime: BigNumberish;
    departureTime: BigNumberish;
    estimatedArrivalTime: BigNumberish;
    chargingStationIds: BigNumberish[];
    createdAt: BigNumberish;
    status: BigNumberish;
  };

  export type JourneyStructOutput = [
    id: bigint,
    user: string,
    origin: string,
    destination: string,
    vehicleId: bigint,
    userVehicleIndex: bigint,
    initialBatteryLevel: bigint,
    totalDistance: bigint,
    estimatedTotalTime: bigint,
    departureTime: bigint,
    estimatedArrivalTime: bigint,
    chargingStationIds: bigint[],
    createdAt: bigint,
    status: bigint
  ] & {
    id: bigint;
    user: string;
    origin: string;
    destination: string;
    vehicleId: bigint;
    userVehicleIndex: bigint;
    initialBatteryLevel: bigint;
    totalDistance: bigint;
    estimatedTotalTime: bigint;
    departureTime: bigint;
    estimatedArrivalTime: bigint;
    chargingStationIds: bigint[];
    createdAt: bigint;
    status: bigint;
  };

  export type ChargingStopStruct = {
    stationId: BigNumberish;
    estimatedArrivalTime: BigNumberish;
    estimatedDepartureTime: BigNumberish;
    chargingDuration: BigNumberish;
    expectedChargeAmount: BigNumberish;
    isCompleted: boolean;
  };

  export type ChargingStopStructOutput = [
    stationId: bigint,
    estimatedArrivalTime: bigint,
    estimatedDepartureTime: bigint,
    chargingDuration: bigint,
    expectedChargeAmount: bigint,
    isCompleted: boolean
  ] & {
    stationId: bigint;
    estimatedArrivalTime: bigint;
    estimatedDepartureTime: bigint;
    chargingDuration: bigint;
    expectedChargeAmount: bigint;
    isCompleted: boolean;
  };
}

export interface JourneyPlannerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateOptimalRoute"
      | "chargingStationManager"
      | "completeJourney"
      | "getCurrentJourneyId"
      | "getJourney"
      | "getUserJourneys"
      | "journeyChargingStops"
      | "journeys"
      | "planJourney"
      | "startJourney"
      | "userJourneys"
      | "vehicleRegistry"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChargingStopAdded"
      | "JourneyCompleted"
      | "JourneyPlanned"
      | "JourneyStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateOptimalRoute",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargingStationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeJourney",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentJourneyId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJourney",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserJourneys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "journeyChargingStops",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "journeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planJourney",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      JourneyPlanner.ChargingStopStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startJourney",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userJourneys",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vehicleRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateOptimalRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargingStationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeJourney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentJourneyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJourney", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserJourneys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "journeyChargingStops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "journeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planJourney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startJourney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userJourneys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vehicleRegistry",
    data: BytesLike
  ): Result;
}

export namespace ChargingStopAddedEvent {
  export type InputTuple = [journeyId: BigNumberish, stationId: BigNumberish];
  export type OutputTuple = [journeyId: bigint, stationId: bigint];
  export interface OutputObject {
    journeyId: bigint;
    stationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JourneyCompletedEvent {
  export type InputTuple = [journeyId: BigNumberish];
  export type OutputTuple = [journeyId: bigint];
  export interface OutputObject {
    journeyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JourneyPlannedEvent {
  export type InputTuple = [
    journeyId: BigNumberish,
    user: AddressLike,
    origin: string,
    destination: string
  ];
  export type OutputTuple = [
    journeyId: bigint,
    user: string,
    origin: string,
    destination: string
  ];
  export interface OutputObject {
    journeyId: bigint;
    user: string;
    origin: string;
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JourneyStartedEvent {
  export type InputTuple = [journeyId: BigNumberish];
  export type OutputTuple = [journeyId: bigint];
  export interface OutputObject {
    journeyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JourneyPlanner extends BaseContract {
  connect(runner?: ContractRunner | null): JourneyPlanner;
  waitForDeployment(): Promise<this>;

  interface: JourneyPlannerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateOptimalRoute: TypedContractMethod<
    [
      _vehicleId: BigNumberish,
      _currentBatteryLevel: BigNumberish,
      _totalDistance: BigNumberish
    ],
    [bigint[]],
    "view"
  >;

  chargingStationManager: TypedContractMethod<[], [string], "view">;

  completeJourney: TypedContractMethod<
    [_journeyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentJourneyId: TypedContractMethod<[], [bigint], "view">;

  getJourney: TypedContractMethod<
    [_journeyId: BigNumberish],
    [
      [
        JourneyPlanner.JourneyStructOutput,
        JourneyPlanner.ChargingStopStructOutput[]
      ]
    ],
    "view"
  >;

  getUserJourneys: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  journeyChargingStops: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        stationId: bigint;
        estimatedArrivalTime: bigint;
        estimatedDepartureTime: bigint;
        chargingDuration: bigint;
        expectedChargeAmount: bigint;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  journeys: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        user: string;
        origin: string;
        destination: string;
        vehicleId: bigint;
        userVehicleIndex: bigint;
        initialBatteryLevel: bigint;
        totalDistance: bigint;
        estimatedTotalTime: bigint;
        departureTime: bigint;
        estimatedArrivalTime: bigint;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  planJourney: TypedContractMethod<
    [
      _origin: string,
      _destination: string,
      _userVehicleIndex: BigNumberish,
      _totalDistance: BigNumberish,
      _estimatedTotalTime: BigNumberish,
      _departureTime: BigNumberish,
      _chargingStationIds: BigNumberish[],
      _chargingStops: JourneyPlanner.ChargingStopStruct[]
    ],
    [void],
    "nonpayable"
  >;

  startJourney: TypedContractMethod<
    [_journeyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  userJourneys: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  vehicleRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateOptimalRoute"
  ): TypedContractMethod<
    [
      _vehicleId: BigNumberish,
      _currentBatteryLevel: BigNumberish,
      _totalDistance: BigNumberish
    ],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "chargingStationManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "completeJourney"
  ): TypedContractMethod<[_journeyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentJourneyId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getJourney"
  ): TypedContractMethod<
    [_journeyId: BigNumberish],
    [
      [
        JourneyPlanner.JourneyStructOutput,
        JourneyPlanner.ChargingStopStructOutput[]
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserJourneys"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "journeyChargingStops"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        stationId: bigint;
        estimatedArrivalTime: bigint;
        estimatedDepartureTime: bigint;
        chargingDuration: bigint;
        expectedChargeAmount: bigint;
        isCompleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "journeys"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        user: string;
        origin: string;
        destination: string;
        vehicleId: bigint;
        userVehicleIndex: bigint;
        initialBatteryLevel: bigint;
        totalDistance: bigint;
        estimatedTotalTime: bigint;
        departureTime: bigint;
        estimatedArrivalTime: bigint;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "planJourney"
  ): TypedContractMethod<
    [
      _origin: string,
      _destination: string,
      _userVehicleIndex: BigNumberish,
      _totalDistance: BigNumberish,
      _estimatedTotalTime: BigNumberish,
      _departureTime: BigNumberish,
      _chargingStationIds: BigNumberish[],
      _chargingStops: JourneyPlanner.ChargingStopStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startJourney"
  ): TypedContractMethod<[_journeyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userJourneys"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "vehicleRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ChargingStopAdded"
  ): TypedContractEvent<
    ChargingStopAddedEvent.InputTuple,
    ChargingStopAddedEvent.OutputTuple,
    ChargingStopAddedEvent.OutputObject
  >;
  getEvent(
    key: "JourneyCompleted"
  ): TypedContractEvent<
    JourneyCompletedEvent.InputTuple,
    JourneyCompletedEvent.OutputTuple,
    JourneyCompletedEvent.OutputObject
  >;
  getEvent(
    key: "JourneyPlanned"
  ): TypedContractEvent<
    JourneyPlannedEvent.InputTuple,
    JourneyPlannedEvent.OutputTuple,
    JourneyPlannedEvent.OutputObject
  >;
  getEvent(
    key: "JourneyStarted"
  ): TypedContractEvent<
    JourneyStartedEvent.InputTuple,
    JourneyStartedEvent.OutputTuple,
    JourneyStartedEvent.OutputObject
  >;

  filters: {
    "ChargingStopAdded(uint256,uint256)": TypedContractEvent<
      ChargingStopAddedEvent.InputTuple,
      ChargingStopAddedEvent.OutputTuple,
      ChargingStopAddedEvent.OutputObject
    >;
    ChargingStopAdded: TypedContractEvent<
      ChargingStopAddedEvent.InputTuple,
      ChargingStopAddedEvent.OutputTuple,
      ChargingStopAddedEvent.OutputObject
    >;

    "JourneyCompleted(uint256)": TypedContractEvent<
      JourneyCompletedEvent.InputTuple,
      JourneyCompletedEvent.OutputTuple,
      JourneyCompletedEvent.OutputObject
    >;
    JourneyCompleted: TypedContractEvent<
      JourneyCompletedEvent.InputTuple,
      JourneyCompletedEvent.OutputTuple,
      JourneyCompletedEvent.OutputObject
    >;

    "JourneyPlanned(uint256,address,string,string)": TypedContractEvent<
      JourneyPlannedEvent.InputTuple,
      JourneyPlannedEvent.OutputTuple,
      JourneyPlannedEvent.OutputObject
    >;
    JourneyPlanned: TypedContractEvent<
      JourneyPlannedEvent.InputTuple,
      JourneyPlannedEvent.OutputTuple,
      JourneyPlannedEvent.OutputObject
    >;

    "JourneyStarted(uint256)": TypedContractEvent<
      JourneyStartedEvent.InputTuple,
      JourneyStartedEvent.OutputTuple,
      JourneyStartedEvent.OutputObject
    >;
    JourneyStarted: TypedContractEvent<
      JourneyStartedEvent.InputTuple,
      JourneyStartedEvent.OutputTuple,
      JourneyStartedEvent.OutputObject
    >;
  };
}
